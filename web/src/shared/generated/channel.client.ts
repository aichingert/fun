// @generated by protobuf-ts 2.9.3 with parameter optimize_code_size
// @generated from protobuf file "channel.proto" (package "channel", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Channel } from "./channel";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GameMove } from "./channel";
import type { JoinRequest } from "./channel";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service channel.Channel
 */
export interface IChannelClient {
    /**
     * @generated from protobuf rpc: JoinQueue(channel.JoinRequest) returns (stream channel.GameMove);
     */
    joinQueue(input: JoinRequest, options?: RpcOptions): ServerStreamingCall<JoinRequest, GameMove>;
}
/**
 * @generated from protobuf service channel.Channel
 */
export class ChannelClient implements IChannelClient, ServiceInfo {
    typeName = Channel.typeName;
    methods = Channel.methods;
    options = Channel.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: JoinQueue(channel.JoinRequest) returns (stream channel.GameMove);
     */
    joinQueue(input: JoinRequest, options?: RpcOptions): ServerStreamingCall<JoinRequest, GameMove> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<JoinRequest, GameMove>("serverStreaming", this._transport, method, opt, input);
    }
}
