// @generated by protobuf-ts 2.9.3 with parameter optimize_code_size
// @generated from protobuf file "lobby.proto" (package "lobby", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message lobby.AvailableChannels
 */
export interface AvailableChannels {
    /**
     * @generated from protobuf field: repeated int32 ids = 1;
     */
    ids: number[];
}
/**
 * @generated from protobuf message lobby.ChannelState
 */
export interface ChannelState {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: bool created = 2;
     */
    created: boolean;
}
/**
 * @generated from protobuf message lobby.Empty
 */
export interface Empty {
}
// @generated message type with reflection information, may provide speed optimized methods
class AvailableChannels$Type extends MessageType<AvailableChannels> {
    constructor() {
        super("lobby.AvailableChannels", [
            { no: 1, name: "ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message lobby.AvailableChannels
 */
export const AvailableChannels = new AvailableChannels$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelState$Type extends MessageType<ChannelState> {
    constructor() {
        super("lobby.ChannelState", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "created", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message lobby.ChannelState
 */
export const ChannelState = new ChannelState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("lobby.Empty", []);
    }
}
/**
 * @generated MessageType for protobuf message lobby.Empty
 */
export const Empty = new Empty$Type();
/**
 * @generated ServiceType for protobuf service lobby.Lobby
 */
export const Lobby = new ServiceType("lobby.Lobby", [
    { name: "GetAvailableChannels", options: {}, I: Empty, O: AvailableChannels },
    { name: "GetChannelStates", serverStreaming: true, options: {}, I: Empty, O: ChannelState }
]);
