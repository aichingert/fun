// @generated by protobuf-ts 2.9.3 with parameter optimize_code_size
// @generated from protobuf file "subtac.proto" (package "suptac", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Lobby } from "./subtac";
import type { Empty } from "./subtac";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Message } from "./subtac";
import type { JoinRequest } from "./subtac";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service suptac.Lobby
 */
export interface ILobbyClient {
    /**
     * @generated from protobuf rpc: JoinLobby(suptac.JoinRequest) returns (stream suptac.Message);
     */
    joinLobby(input: JoinRequest, options?: RpcOptions): ServerStreamingCall<JoinRequest, Message>;
    /**
     * @generated from protobuf rpc: SendMessage(suptac.Message) returns (suptac.Empty);
     */
    sendMessage(input: Message, options?: RpcOptions): UnaryCall<Message, Empty>;
}
/**
 * @generated from protobuf service suptac.Lobby
 */
export class LobbyClient implements ILobbyClient, ServiceInfo {
    typeName = Lobby.typeName;
    methods = Lobby.methods;
    options = Lobby.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: JoinLobby(suptac.JoinRequest) returns (stream suptac.Message);
     */
    joinLobby(input: JoinRequest, options?: RpcOptions): ServerStreamingCall<JoinRequest, Message> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<JoinRequest, Message>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendMessage(suptac.Message) returns (suptac.Empty);
     */
    sendMessage(input: Message, options?: RpcOptions): UnaryCall<Message, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Message, Empty>("unary", this._transport, method, opt, input);
    }
}
